<?xml version="1.0"?>
<!--
/*
 *  File Name:   MyNETCoreLib.xml
 *
 *  Project:     MyNETCoreLib
 *
 *  Copyright (c) 2021 Bradley Willcott
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses />.
 *
 * ****************************************************************
 * Name: Bradley Willcott
 * ID:   M198449
 * Date: 1/11/2021
 * ****************************************************************
 */
-->

<doc>
    <assembly>
        <name>MyNETCoreLib</name>
    </assembly>
    <members>
        <member name="T:MyNETCoreLib.AvlTree`1">
            <summary>
            Defines the <see cref="!:AvlTree" />.<br />
            This tree does not support <c>null</c> entries.
            </summary>
        </member>
        <member name="F:MyNETCoreLib.AvlTree`1.lastIndexVersion">
            <summary>
            The version of data last indexed.
            </summary>
        </member>
        <member name="F:MyNETCoreLib.AvlTree`1.version">
            <summary>
            The version of the data.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:AvlTree" /> class as a
            Balanced Binary Search Tree.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyNETCoreLib.AvlTree`1" /> class with the contents
            of the <paramref name="list" />.
            </summary>
            <param name="list">The list of existing items to start with.</param>
            <param name="balanced">Set tree as a {Balance} Binary Search Tree.</param>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Balanced">
            <summary>
            Gets a value indicating whether this <see cref="T:MyNETCoreLib.AvlTree`1" /> is balanced.
            </summary>
            <value>
              <c>true</c> if balanced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Count">
            <summary>
            Gets the Count.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" />
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.IndexIsDirty">
            <summary>
            Gets a value indicating whether [index is dirty].
            </summary>
            <value>
              <c>true</c> if [index is dirty]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Root">
            <summary>
            Gets or sets the root node.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T" /> at the specified index.
            </summary>
            <remarks>
            Due to the implementation requirements of this method, it is strongly advised
            that it NOT be used within a loop of any kind.<br />
            If you need to iterate through the list, then use <see cref="M:MyNETCoreLib.AvlTree`1.GetEnumerator" />
            </remarks>
            <value>
            The <see cref="!:T" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">if attempt to <see langword="set" /> a new value.</exception>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object" /> at the specified index.
            </summary>
            <remarks>
            Due to the implementation requirements of this method, it is strongly advised
            that it NOT be used within a loop of any kind.<br />
            If you need to iterate through the list, then use <see cref="M:MyNETCoreLib.AvlTree`1.GetEnumerator" />
            </remarks>
            <value>
            The <see cref="T:System.Object" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Add(`0)">
            <summary>
            Add new data to tree node and re-balance
            uses the Balance_Tree and Rotate methods.
            </summary>
            <remarks>
            <b>Note:</b><br />
            Neither <see langword="null" />s nor duplicates are allowed.
            </remarks>
            <param name="item">The data<see cref="T:System.String" />.</param>
            <returns><c>true</c> unless <paramref name="item" /> is <c>null</c> or a duplicate.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <seealso cref="M:MyNETCoreLib.AvlTree`1.Add(`0)" />
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">
            The object to add to the <see cref="T:System.Collections.IList" />.
            </param>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not
            inserted into the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
              <see langword="true" /> if <paramref name="item" /> is found in the
              <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="value">
            The object to locate in the <see cref="T:System.Collections.IList" />.
            </param>
            <returns>
              <see langword="true" /> if the <see cref="T:System.Object" /> is found in the
              <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination
            of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying
            begins.</param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of
            the elements copied from <see cref="T:System.Collections.ICollection" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Delete(`0)">
            <summary>
            Delete the <paramref name="target" /> from the tree.
            </summary>
            <param name="target">The target<see cref="T:System.String" />.</param>
            <returns>
            <c>true</c> unless <paramref name="target" /> is <c>null</c>, or <paramref name="target" />
            is not found.
            </returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Display">
            <summary>
            Display the data items in order.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through
            the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the
            <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">
            The object to locate in the <see cref="T:System.Collections.IList" />.
            </param>
            <returns>
            The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="value" /> should be inserted.
            </param>
            <param name="value">
            The object to insert into the <see cref="T:System.Collections.IList" />.
            </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <returns>
              <see langword="true" /> if <paramref name="item" /> was successfully removed from the
              <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
              This method also returns <see langword="false" /> if <paramref name="item" /> is not found
              in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">
            The object to remove from the <see cref="T:System.Collections.IList" />.
            </param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Find(`0)">
            <summary>
            Finds the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" /> if found, or <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.ReIndex">
            <summary>
            Re-index the tree.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.AddRecursive(MyNETCoreLib.AvlTree{`0}.Node{`0},MyNETCoreLib.AvlTree{`0}.Node{`0},System.Boolean@,System.Boolean)">
            <summary>
            The AddRecursive.
            </summary>
            <param name="current">The current<see cref="!:Node" />.</param>
            <param name="node">The n<see cref="!:Node" />.</param>
            <param name="added">
            <see langword="true" /> if successful, <see langword="false" /> if already exists.
            </param>
            <param name="balanced"><see langword="true" /> if tree is to be kept balanced.</param>
            <returns>The <see cref="!:Node" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Balance_Factor(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            The Balance_Factor.
            </summary>
            <param name="current">The current<see cref="!:Node" />.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Balance_Tree(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Method to balance tree after insert and delete.
            </summary>
            <param name="current">The current<see cref="!:Node" />.</param>
            <returns>The <see cref="!:Node" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DeleteNode(MyNETCoreLib.AvlTree{`0}.Node{`0},`0,System.Boolean@,System.Boolean)">
            <summary>
            The DeleteNode.
            </summary>
            <param name="current">The current<see cref="!:Node" />.</param>
            <param name="target">The target<see cref="T:System.String" />.</param>
            <param name="found"><c>true</c> if found.</param>
            <param name="balanced"><see langword="true" /> if tree is to be kept balanced.</param>
            <returns>The <see cref="!:Node" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DisplayInOrder(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            The DisplayInOrder.
            </summary>
            <param name="current">The current<see cref="!:Node" />.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.FillArray(MyNETCoreLib.AvlTree{`0}.Node{`0},`0[],System.Int32@)">
            <summary>
            Fills the array.
            </summary>
            <param name="current">The current.</param>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.FindIndexRecursive(System.Int32,MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Recursively search for the
            </summary>
            <param name="index">The index<see cref="T:System.Int32" />.</param>
            <param name="current">The current<see cref="!:avl_tree.AvlTree&lt;T&gt;.Node&lt;T&gt;" />.</param>
            <returns>
            The <see cref="!:avl_tree.AvlTree&lt;T&gt;.Node&lt;T&gt;" /> if <paramref name="index" /> is found,
            otherwise <see langword="null" />.
            </returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.FindRecursive(`0,MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Recursively find the <paramref name="target" /> within the
            <paramref name="current" /> <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />'s subtree.
            </summary>
            <param name="target">The target object being sought.</param>
            <param name="current">The current <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" /> if found, otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.GetHeight(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Get the height of the <paramref name="current" /> <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.
            </summary>
            <param name="current">The current<see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The height.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.IndexRecursively(MyNETCoreLib.AvlTree{`0}.Node{`0},System.Int32@)">
            <summary>
            Recursively index the nodes.
            </summary>
            <param name="current">The current <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <param name="index">The index <see langword="int" />.</param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Max(System.Int32,System.Int32)">
            <summary>
            The maximum height between <paramref name="leftHeight" /> and <paramref name="rightHeight" />.
            </summary>
            <param name="leftHeight">The left height.</param>
            <param name="rightHeight">The right height.</param>
            <returns>The height.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.RotateLL(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Rotate subtree Left-Left
            </summary>
            <param name="parent">The parent <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The pivot <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.RotateLR(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Rotate subtree Left-Right
            </summary>
            <param name="parent">The parent <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The pivot <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.RotateRL(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Rotate subtree Right-Left
            </summary>
            <param name="parent">The parent <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The pivot <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.RotateRR(MyNETCoreLib.AvlTree{`0}.Node{`0})">
            <summary>
            Rotate subtree Right-Right
            </summary>
            <param name="parent">The parent <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</param>
            <returns>The pivot <see cref="T:MyNETCoreLib.AvlTree`1.Node`1" />.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.GetNodeAt(System.Int32)">
            <summary>
            Gets the <see cref="!:avl_tree.AvlTree&lt;T&gt;.Node&lt;T&gt;" /> at <paramref name="index" />.
            </summary>
            <param name="index">The index to search for.</param>
            <returns>
            The <see cref="!:avl_tree.AvlTree&lt;T&gt;.Node&lt;T&gt;" /> if found, <see langword="null" /> otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.InternalAdd(`0)">
            <summary>
            This is used to add an <paramref name="item" /> to the tree.
            </summary>
            <remarks>
            The reason it has been pulled out of the public method, is to allow constructor access
            to it, as the public method is a virtual one.
            </remarks>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:MyNETCoreLib.AvlTree`1.DataEnum`1">
            <summary>
            Defines the <see cref="!:DataEnum" />.
            </summary>
            <remarks>
            This code is based on the code at:
            https://docs.microsoft.com/en-au/dotnet/api/system.collections.ienumerator?view=net-5.0
            </remarks>
        </member>
        <member name="F:MyNETCoreLib.AvlTree`1.DataEnum`1.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="F:MyNETCoreLib.AvlTree`1.DataEnum`1.list">
            <summary>
            The list
            </summary>
        </member>
        <member name="F:MyNETCoreLib.AvlTree`1.DataEnum`1.position">
            <summary>
            The current position within the list array.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.#ctor(`1[])">
            <summary>
            Initializes a new instance of the <see cref="!:DataEnum" /> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="!:DataEnum`1" /> class.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.DataEnum`1.Current">
            <summary>
            Gets the Current object.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.DataEnum`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.MoveNext">
            <summary>
            MoveNext to the next element in the list.
            </summary>
            <returns><c>true</c> if <see cref="P:MyNETCoreLib.AvlTree`1.DataEnum`1.Current" /> now points to a valid entry in the list.</returns>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.Reset">
            <summary>
            Reset the position to before the beginning of the list.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.DataEnum`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MyNETCoreLib.AvlTree`1.Node`1">
            <summary>
            Represents a node in a <see cref="T:MyNETCoreLib.AvlTree`1" />.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.AvlTree`1.Node`1.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="!:Node" /> class.
            </summary>
            <param name="value">The value<see cref="T:System.String" />.</param>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Node`1.Value">
            <summary>
            Gets or sets the Value.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Node`1.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Node`1.Left">
            <summary>
            Gets or sets the Left.
            </summary>
        </member>
        <member name="P:MyNETCoreLib.AvlTree`1.Node`1.Right">
            <summary>
            Gets or sets the Right.
            </summary>
        </member>
        <member name="T:MyNETCoreLib.ObservableAvlTree`1">
            <summary>
            Defines the <see cref="T:MyNETCoreLib.ObservableAvlTree`1" />.
            </summary>
            <typeparam name="T">.</typeparam>
        </member>
        <member name="E:MyNETCoreLib.ObservableAvlTree`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.Add(`0)">
            <summary>
            Add new data to tree node and re-balance
            uses the Balance_Tree and Rotate methods.
            </summary>
            <param name="item">The data<see cref="E:System.String" />.</param>
            <returns>
              <c>true</c> unless <paramref name="item" /> is <c>null</c> or a duplicate.
            </returns>
            <remarks>
            <b>Note:</b>
            <br />
            Neither <see langword="null" />s nor duplicates are allowed.
            </remarks>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.Clear">
            <summary>
            Removes all items from the <see cref="E:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.Delete(`0)">
            <summary>
            Delete the <paramref name="target" /> from the tree.
            </summary>
            <param name="target">The target<see cref="E:System.String" />.</param>
            <returns>
            <c>true</c> unless <paramref name="target" /> is <c>null</c>, or <paramref name="target" />
            is not found.
            </returns>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Called when [collection changed].
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Called when [collection changed].
            </summary>
            <param name="action">The action.</param>
            <param name="changedItem">The changed item.</param>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Called when [collection changed].
            </summary>
            <param name="action">The action.</param>
            <param name="changedItem">The changed item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:MyNETCoreLib.ObservableAvlTree`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MyNETCoreLib.ObservableAvlTree`1.CollectionChanged" /> event.
            </summary>
            <param name="args">The args <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />.</param>
        </member>
        <member name="T:MyNETCoreLib.ReindexFailedException">
            <summary>
            Defines the <see cref="T:MyNETCoreLib.ReindexFailedException" />.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.ReindexFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyNETCoreLib.ReindexFailedException" /> class.
            </summary>
        </member>
        <member name="M:MyNETCoreLib.ReindexFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyNETCoreLib.ReindexFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyNETCoreLib.ReindexFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyNETCoreLib.ReindexFailedException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or
            a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is
            specified.</param>
        </member>
        <member name="M:MyNETCoreLib.ReindexFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyNETCoreLib.ReindexFailedException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:MyNETCoreLib.ReindexFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the
            exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
