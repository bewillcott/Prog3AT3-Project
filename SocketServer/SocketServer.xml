<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketServer</name>
    </assembly>
    <members>
        <member name="T:SocketServer.Pbkdf2">
            <summary>
            Defines the <see cref="T:SocketServer.Pbkdf2"/>.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.HASH_ALGORITHM">
            <summary>
            Defines the HASH_ALGORITHM.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.HASH_ALGORITHM_INDEX">
            <summary>
            Defines the HASH_ALGORITHM_INDEX.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.HASH_BYTE_SIZE">
            <summary>
            Defines the HASH_BYTE_SIZE.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.HASH_SECTIONS">
            <summary>
            Defines the HASH_SECTIONS.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.HASH_SIZE_INDEX">
            <summary>
            Defines the HASH_SIZE_INDEX.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.ITERATION_INDEX">
            <summary>
            Defines the ITERATION_INDEX.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.NUM_OF_TEST_CYCLES">
            <summary>
            Used by the main() method in for loop test.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.PBKDF2_INDEX">
            <summary>
            Defines the PBKDF2_INDEX.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.PBKDF2_ITERATIONS">
            <summary>
            Defines the PBKDF2_ITERATIONS.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.SALT_BYTE_SIZE">
            <summary>
            Defines the SALT_BYTE_SIZE.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.SALT_INDEX">
            <summary>
            Defines the SALT_INDEX.
            </summary>
        </member>
        <member name="F:SocketServer.Pbkdf2.RNGCSP">
            <summary>
            The cryptographic random number generator.
            </summary>
            <autogeneratedoc/>
        </member>
        <member name="M:SocketServer.Pbkdf2.CreateHash(System.String)">
            <summary>
            The CreateHash.
            </summary>
            <param name="password">The password <see cref="T:System.String"/>.</param>
            <returns>The hashed <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:SocketServer.Pbkdf2.Main(System.String[])">
            <summary>
            Tests the basic functionality of the <see cref="T:SocketServer.Pbkdf2"/> class.
            </summary>
            <param name="args">The arguments are ignored.</param>
            <autogeneratedoc/>
            TODO: Move this code into a Test class
        </member>
        <member name="M:SocketServer.Pbkdf2.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies the password.
            </summary>
            <param name="password">   The password.</param>
            <param name="correctHash">The correct hash.</param>
            <returns></returns>
            <exception cref="T:SocketServer.Pbkdf2.InvalidHashException">
            Fields are missing from the password hash. or Could not parse the iteration count as an
            integer. or Invalid number of iterations. Must be &gt;= 1. or Base64 decoding of salt
            failed. or Base64 decoding of pbkdf2 output failed. or Could not parse the hash size as
            an integer. or Hash length doesn't match stored hash length.
            </exception>
            <exception cref="T:SocketServer.Pbkdf2.CannotPerformOperationException">
            Unsupported hash type.
            </exception>
            <autogeneratedoc/>
        </member>
        <member name="M:SocketServer.Pbkdf2.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays in length-constant time. <br/> This comparison method is used
            so that password hashes cannot be extracted from an on-line system using a timing attack
            and then attacked off-line.
            </summary>
            <param name="a">the first byte array</param>
            <param name="b">the second byte array</param>
            <returns><c>true</c> if both byte arrays are the same, <c>false</c> if not.</returns>
            <autogeneratedoc/>
        </member>
        <member name="T:SocketServer.Pbkdf2.CannotPerformOperationException">
            <summary>
            This exception is thrown when something is wrong with the platform your code is running
            on, and for some reason it's not safe to verify a password on it.
            </summary>
            <seealso cref="T:System.Exception"/>
            <autogeneratedoc/>
        </member>
        <member name="T:SocketServer.Pbkdf2.InvalidHashException">
            <summary>
            The <c>correctHash</c> parameter you gave to the <see cref="M:SocketServer.Pbkdf2.VerifyPassword(System.String,System.String)"/> method was somehow corrupted. Note that some ways of corrupting a hash are
            impossible to detect, and their only symptom will be that <see
            cref="M:SocketServer.Pbkdf2.VerifyPassword(System.String,System.String)"/> will return <c>false</c> even though the correct
            password was given. So <see cref="T:SocketServer.Pbkdf2.InvalidHashException"/> is not guaranteed to be thrown
            if a hash has been changed, but if it is thrown, then you can be sure that the hash
            <i>was</i> changed.
            </summary>
            <seealso cref="T:System.Exception"/>
            <autogeneratedoc/>
        </member>
        <member name="T:SocketServer.Server">
            <summary>
            Defines the <see cref="T:SocketServer.Server" />.
            </summary>
        </member>
        <member name="M:SocketServer.Server.Main(System.String[])">
            <summary>
            The Main.
            </summary>
            <param name="args">The args<see cref="!:string[]"/>.</param>
        </member>
        <member name="T:SocketServer.SessionState">
            <summary>
            Holds state information about a single current session.
            </summary>
        </member>
        <member name="F:SocketServer.SessionState.lastSessionId">
            <summary>
            Defines the lastSessionId.
            </summary>
        </member>
        <member name="M:SocketServer.SessionState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SocketServer.SessionState"/> class.
            </summary>
        </member>
        <member name="P:SocketServer.SessionState.ChatOpen">
            <summary>
            Gets or sets a value indicating whether a Chat session is Open.
            </summary>
        </member>
        <member name="P:SocketServer.SessionState.ClientHostName">
            <summary>
            Gets or sets the ClientHostName.
            </summary>
        </member>
        <member name="P:SocketServer.SessionState.ClientPortNumber">
            <summary>
            Gets or sets the ClientPortNumber.
            </summary>
        </member>
        <member name="P:SocketServer.SessionState.LoggedIn">
            <summary>
            Gets a value indicating whether [logged in].
            </summary>
            <value>
              <c>true</c> if [logged in]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SocketServer.SessionState.Message">
            <summary>
            Gets or sets the Message.
            </summary>
        </member>
        <member name="P:SocketServer.SessionState.SessionId">
            <summary>
            Gets the session identifier.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:SocketServer.SessionState.Username">
            <summary>
            Gets or sets the Username.
            </summary>
        </member>
        <member name="M:SocketServer.SessionState.CanOpenChat">
            <summary>
            Is a Chat session allowed?.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:SocketServer.UserAuthenticator">
            <summary>
            Defines the <see cref="T:SocketServer.UserAuthenticator"/>.
            </summary>
        </member>
        <member name="F:SocketServer.UserAuthenticator.Datastore">
            <summary>
            File to persist user account details.
            </summary>
            <autogeneratedoc/>
        </member>
        <member name="F:SocketServer.UserAuthenticator.users">
            <summary>
            The sorted list of registered users.
            </summary>
            <autogeneratedoc/>
        </member>
        <member name="M:SocketServer.UserAuthenticator.LoadData">
            <summary>
            LoadData from a CSV file.
            </summary>
            <returns></returns>
            <autogeneratedoc/>
        </member>
        <member name="M:SocketServer.UserAuthenticator.SaveData">
            <summary>
            Saves the data to the CSV file.
            </summary>
            <returns></returns>
            <autogeneratedoc/>
        </member>
        <member name="P:SocketServer.UserAuthenticator.User.Username">
            <summary>
            The username - key.
            </summary>
            <autogeneratedoc/>
        </member>
        <member name="P:SocketServer.UserAuthenticator.User.PasswordHash">
            <summary>
            Gets or sets the password hash.
            </summary>
            <value>The password hash.</value>
            <autogeneratedoc/>
        </member>
    </members>
</doc>
