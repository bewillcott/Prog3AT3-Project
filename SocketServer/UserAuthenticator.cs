/*
 *  File Name:   UserAuthenticator.cs
 *
 *  Project:     SocketServer
 *
 *  Copyright (c) 2021 Bradley Willcott
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ****************************************************************
 * Name: Bradley Willcott
 * ID:   M198449
 * Date: 31/10/2021
 * ****************************************************************
 */

namespace SocketServer
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;

    using CsvHelper;

    using MyNETCoreLib;

    using static Common.Constants;
    using static SocketServer.Pbkdf2;

    /// <summary>
    /// Defines the <see cref="UserAuthenticator"/>.
    /// </summary>
    public class UserAuthenticator
    {
        #region Private Fields

        /// <summary>
        /// File to persist user account details.
        /// </summary>
        /// <autogeneratedoc/>
        private const string Datastore = @"user_accounts.csv";

        /// <summary>
        /// The sorted list of registered users.
        /// </summary>
        /// <autogeneratedoc/>
        private readonly AvlTree<User> users;

        #endregion Private Fields

        #region Public Constructors

        public UserAuthenticator()
        {
            users = new AvlTree<User>();
            LoadData();
        }

        #endregion Public Constructors

        #region Public Methods

        public bool CreateNewAccount(SessionState sessionState, string username, string password)
        {
            Log($"CreateNewAccount({username}, {password})");
            sessionState.Username = username.Length > 0 ? username : null;
            bool rtn = false;

            if (sessionState.Username != null && password.Length > 0)
            {
                User user = new User(username, null);

                if (!users.Contains(user))
                {
                    try
                    {
                        user.PasswordHash = Pbkdf2.CreateHash(password);
                        users.Add(user);
                        SaveData();

                        rtn = true;
                    }
                    catch (CannotPerformOperationException ex)
                    {
                        Log($"{ex}");
                    }
                    catch (IOException ex)
                    {
                        Log($"{ex}");
                    }
                }
            }

            sessionState.SetPasswordValid(rtn);

            if (rtn)
            {
                Log($"New account created for: {username}.");
                Log($"User ({username}) is logged in.");
            }
            else
            {
                Log($"Account creation for: {username} - FAILED!");
            }

            return sessionState.LoggedIn;
        }

        public bool ValidatePassword(SessionState sessionState, string username, string password)
        {
            Log($"Validate({username}, {password})");
            sessionState.Username = username.Length > 0 ? username : null;
            bool rtn = false;

            if (sessionState.Username != null && password.Length > 0)
            {
                User user = new User(username, null);

                if (users.Contains(user))
                {
                    string pwd = users[users.IndexOf(user)].PasswordHash;

                    try
                    {
                        rtn = Pbkdf2.VerifyPassword(password, pwd);
                    }
                    catch (CannotPerformOperationException ex)
                    {
                        Log($"{ex}");
                    }
                    catch (IOException ex)
                    {
                        Log($"{ex}");
                    }
                }
            }

            sessionState.SetPasswordValid(rtn);

            if (rtn)
            {
                Log($"User ({username}) is logged in.");
            }
            else
            {
                Log($"Login attempt: {username} - FAILED!");
            }

            return sessionState.LoggedIn;
        }

        #endregion Public Methods

        #region Private Methods

        /// <summary>
        /// LoadData from a CSV file.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc/>
        private bool LoadData()
        {
            Log(nameof(LoadData));

            try
            {
                // Prepare data
                users.Clear();

                // Open file and load the data
                using (StreamReader reader = new(Datastore))
                using (CsvReader csv = new(reader, CultureInfo.CurrentCulture))
                {
                    foreach (User record in csv.GetRecords<User>())
                    {
                        users.Add(record);
                    }
                }
            }
            catch (Exception ex)
            {
                Log($"LoadData: {ex}");
                users.Clear();
            }
            return users.Count > 0;
        }

        /// <summary>
        /// Saves the data to the CSV file.
        /// </summary>
        /// <returns></returns>
        /// <autogeneratedoc/>
        private bool SaveData()
        {
            Log(nameof(SaveData));
            bool rtn = false;

            try
            {
                // Save the data to the original file
                using (var writer = new StreamWriter(Datastore))
                using (var csv = new CsvWriter(writer, CultureInfo.CurrentCulture))
                {
                    csv.WriteRecords(users);
                    rtn = true;
                }
            }
            catch (Exception ex)
            {
                Log($"SaveDate: {ex}");
            }

            return rtn;
        }

        #endregion Private Methods

        #region Internal Classes

        /// <summary>
        /// Holds user account details.
        /// <para/>
        /// Used by Login process to validate passwords.
        /// </summary>
        /// <seealso cref="System.IComparable&lt;SocketServer.UserAuthenticator.User&gt;"/>
        /// <seealso cref="System.IEquatable&lt;SocketServer.UserAuthenticator.User&gt;"/>
        /// <autogeneratedoc/>
        internal class User : IComparable<User>, IEquatable<User>
        {
            #region Public Constructors

            public User(string Username, string PasswordHash)
            {
                if (Username == null)
                {
                    throw new ArgumentNullException(nameof(Username), "Must not be 'null'");
                }

                this.Username = Username;
                this.PasswordHash = PasswordHash;
            }

            #endregion Public Constructors

            #region Public Fields

            /// <summary>
            /// The username - key.
            /// </summary>
            /// <autogeneratedoc/>
            public string Username { get; set; }

            /// <summary>
            /// Gets or sets the password hash.
            /// </summary>
            /// <value>The password hash.</value>
            /// <autogeneratedoc/>
            public string PasswordHash { get; set; }

            #endregion Public Fields

            #region Public Methods

            public static bool operator !=(User left, User right)
            {
                return !(left == right);
            }

            public static bool operator <(User left, User right)
            {
                return left.CompareTo(right) < 0;
            }

            public static bool operator <=(User left, User right)
            {
                return left.CompareTo(right) <= 0;
            }

            public static bool operator ==(User left, User right)
            {
                return EqualityComparer<User>.Default.Equals(left, right);
            }

            public static bool operator >(User left, User right)
            {
                return left.CompareTo(right) > 0;
            }

            public static bool operator >=(User left, User right)
            {
                return left.CompareTo(right) >= 0;
            }

            public int CompareTo(User other)
            {
                return Equals(other) ? 0 : Username.CompareTo(other.Username);
            }

            public override bool Equals(object obj)
            {
                return Equals(obj as User);
            }

            public bool Equals(User other)
            {
                return other != null &&
                       Username == other.Username;
            }

            public override int GetHashCode()
            {
                return HashCode.Combine(Username);
            }

            #endregion Public Methods
        }

        #endregion Internal Classes
    }
}
